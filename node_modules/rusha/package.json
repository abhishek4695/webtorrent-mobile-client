{
  "_args": [
    [
      {
        "raw": "rusha@^0.8.1",
        "scope": null,
        "escapedName": "rusha",
        "name": "rusha",
        "rawSpec": "^0.8.1",
        "spec": ">=0.8.1 <0.9.0",
        "type": "range"
      },
      "D:\\WebProjects\\WebtorrentMobile\\node_modules\\simple-sha1"
    ]
  ],
  "_from": "rusha@>=0.8.1 <0.9.0",
  "_id": "rusha@0.8.12",
  "_inCache": true,
  "_location": "/rusha",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/rusha-0.8.12.tgz_1516411999264_0.0023439007345587015"
  },
  "_npmUser": {
    "name": "srijs",
    "email": "srijs@airpost.net"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rusha@^0.8.1",
    "scope": null,
    "escapedName": "rusha",
    "name": "rusha",
    "rawSpec": "^0.8.1",
    "spec": ">=0.8.1 <0.9.0",
    "type": "range"
  },
  "_requiredBy": [
    "/simple-sha1"
  ],
  "_resolved": "https://registry.npmjs.org/rusha/-/rusha-0.8.12.tgz",
  "_shasum": "5d838ce1fce8b145674ee771eaad5bcb2575e64b",
  "_shrinkwrap": null,
  "_spec": "rusha@^0.8.1",
  "_where": "D:\\WebProjects\\WebtorrentMobile\\node_modules\\simple-sha1",
  "author": {
    "name": "Sam Rijs"
  },
  "bugs": {
    "url": "https://github.com/srijs/rusha/issues"
  },
  "dependencies": {},
  "description": "A high-performance pure-javascript SHA1 implementation suitable for large binary data.",
  "devDependencies": {
    "asm.js": "^0.0.2",
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.0.3",
    "babel-plugin-transform-es2015-arrow-functions": "^6.22.0",
    "babel-plugin-transform-es2015-block-scoped-functions": "^6.22.0",
    "babel-plugin-transform-es2015-block-scoping": "^6.26.0",
    "babel-plugin-transform-es2015-classes": "^6.24.1",
    "babel-plugin-transform-es2015-destructuring": "^6.23.0",
    "babelify": "^8.0.0",
    "benchmark": "^1.0.0",
    "brfs": "^1.4.3",
    "browserify": "^14.5.0",
    "browserify-derequire": "^0.9.4",
    "grunt": "^1.0.1",
    "grunt-browserify": "^5.2.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-uglify": "^3.1.0",
    "grunt-eslint": "^20.1.0",
    "grunt-karma": "^2.0.0",
    "karma": "^1.7.1",
    "karma-benchmark": "^0.7.1",
    "karma-benchmark-reporter": "^0.1.1",
    "karma-browserify": "^5.1.2",
    "karma-chai-plugins": "^0.9.0",
    "karma-chrome-launcher": "^2.2.0",
    "karma-firefox-launcher": "^1.0.1",
    "karma-mocha": "^1.3.0",
    "karma-mocha-reporter": "^2.2.5",
    "karma-webpack": "^2.0.6",
    "microtime": "^2.1.1",
    "mocha": "^4.0.1",
    "node-forge": "^0.7.1",
    "sha.js": "^2.4.9",
    "strictify": "^0.2.0",
    "sweetify": "^0.4.0",
    "watchify": "^3.9.0",
    "webpack": "^3.9.1",
    "webworkify": "^1.5.0"
  },
  "directories": {},
  "dist": {
    "shasum": "5d838ce1fce8b145674ee771eaad5bcb2575e64b",
    "tarball": "https://registry.npmjs.org/rusha/-/rusha-0.8.12.tgz"
  },
  "gitHead": "cba94ee1995ec7d80e0bd47dfd8742226f44d556",
  "homepage": "https://github.com/srijs/rusha#readme",
  "keywords": [
    "sha1",
    "binary",
    "crypto",
    "hash"
  ],
  "license": "MIT",
  "main": "dist/rusha.js",
  "maintainers": [
    {
      "name": "srijs",
      "email": "recv@awesam.de"
    }
  ],
  "name": "rusha",
  "optionalDependencies": {},
  "readme": "# Rusha\n\n*A high-performance pure-javascript SHA1 implementation suitable for large binary data.*\n\n[![npm](https://img.shields.io/npm/v/rusha.svg)](https://www.npmjs.com/package/rusha) [![npm](https://img.shields.io/npm/dm/rusha.svg)](https://www.npmjs.com/package/rusha) [![Build Status](https://travis-ci.org/srijs/rusha.svg?branch=master)](https://travis-ci.org/srijs/rusha)\n\n## Installing\n\n### NPM\n\nRusha is available via [npm](http://npmjs.org/):\n\n```\nnpm install rusha\n```\n\n### Bower\n\nRusha is available via [bower](http://twitter.github.com/bower/):\n\n```\nbower install rusha\n```\n\n## Usage\n\nIt is highly recommended to run CPU-intensive tasks in a [Web Worker](http://developer.mozilla.org/en-US/docs/DOM/Using_web_workers). To do so, just follow the instructions on [_Using the Rusha Worker_](#using-the-rusha-worker).\n\nIf you have a good reason not to use Web Workers, follow the instructions on [_Using the Rusha Hash API_](#using-the-rusha-hash-api) instead.\n\n### Using the Rusha Worker\n\n#### Spawning workers\n\nYou can create a new worker in two ways. The preferred way is using `Rusha.createWorker()`, which spawns a webworker containing the hashing logic, and returns back a `Worker` object:\n\n```js\nconst worker = Rusha.createWorker();\n```\n\nIf for some reason this does not work for you, you can also just point the `Worker` constructor\nat `rusha.js` or `rusha.min.js`, like so:\n\n```js\nconst worker = new Worker(\"dist/rusha.min.js\");\n```\n\n_**Note**: In order to make the latter work, Rusha will by default subscribe to incoming messages\nwhen it finds itself inside a worker context. This can lead to problems when you would like to use Rusha as a library inside a web worker, but still have control over the messaging. To disable this behaviour, you can call `Rusha.disableWorkerBehaviour()` from within the worker._\n\n#### Communicating with the worker\n\nYou can send your instance of the web worker messages in the format `{id: jobid, data: dataobject}`. The worker then sends back a message in the format `{id: jobid, hash: hash}`, were jobid is the id of the job previously received and hash is the hash of the data-object you passed, be it a `Blob`, `Array`, `Buffer`, `ArrayBuffer` or `String`\n\n### Using the Rusha Hash API\n\nThe Rusha `Hash` API is inspired by the [Node.js `Hash` API](https://nodejs.org/api/crypto.html#crypto_class_hash).\n\n#### Examples\n\n##### Simple usage\n\n```js\nconst hexHash = Rusha.createHash().update('I am Rusha').digest('hex'); \n```\n\n##### Incremental usage\n\n```js\nconst hash = Rusha.createHash(); \nhash.update('I am');\nhash.update(' Rusha');\nconst hexHash = rusha.digest('hex');\n```\n\n#### Reference\n\nYou instantiate a new Hash object by calling `Rusha.createHash`. When created, it provides the following methods:\n\n- `Hash#update(data)`: Update the hash state with the given `data`, which can be a binary `String`, `Buffer`, `Array`, `ArrayBuffer` or `Blob`.\n- `Hash#digest([encoding])`: Calculates the digest of all of the data passed to be hashed. The `encoding` can be `'hex'` or undefined. If `encoding` is provided a string will be returned; otherwise an `ArrayBuffer` is returned.\n\n### Using the Rusha Object (DEPRECATED)\n\nThe Rusha Object API is deprecated, and is only documented here for older code bases that might still be using it.\n\nYou should be using the `Hash` API instead, which is documented above.\n\n#### Examples\n\n##### Normal usage\n\n```js\nconst rusha = new Rusha();\nconst hexHash = rusha.digest('I am Rusha'); \n```\n\n##### Incremental usage\n\n```js\nconst rusha = new Rusha();\nrusha.resetState();\nrusha.append('I am');\nrusha.append(' Rusha');\nconst hexHash = rusha.end();\n```\n\n#### Reference\n\nYour instantiate a new Rusha object by doing `new Rusha()`. When created, it provides the following methods:\n\n- `Rusha#digest(d)`: Create a hex digest from data of the three kinds mentioned below, or throw and error if the type is unsupported.\n- `Rusha#digestFromString(s)`: Create a hex digest from a binary `String`. A binary string is expected to only contain characters whose charCode < 256.\n- `Rusha#digestFromBuffer(b)`: Create a hex digest from a `Buffer` or `Array`. Both are expected to only contain elements < 256.\n- `Rusha#digestFromArrayBuffer(a)`: Create a hex digest from an `ArrayBuffer` object.\n- `Rusha#rawDigest(d)`: Behaves just like #digest(d), except that it returns the digest as an Int32Array of size 5.\n- `Rusha#resetState()`: Resets the internal state of the computation.\n- `Rusha#append(d)`: Appends a binary `String`, `Buffer`, `Array`, `ArrayBuffer` or `Blob`.\n- `Rusha#setState(state)`: Sets the internal computation state. See: getState().\n- `Rusha#getState()`: Returns an object representing the internal computation state. You can pass this state to setState(). This feature is useful to resume an incremental sha.\n- `Rusha#end()`: Finishes the computation of the sha, returning a hex digest.\n- `Rusha#rawEnd()`: Behaves just like #end(), except that it returns the digest as an Int32Array of size 5.\n\n## Development\n\n* Download npm dependencies with `npm install`\n* Make changes to the files in `src/`\n* Build with `npm run build`\n* Run tests with `npm test`\n\n## Benchmarks\n\nTested were my Rusha implementation, the sha1.js implementation by [P. A. Johnston](http://pajhome.org.uk/crypt/md5/sha1.html), Tim Caswell's [Cifre](http://github.com/openpeer/cifre) and the Node.JS native implementation.\n\nIf you want to check the performance for yourself in your own browser, I compiled a [JSPerf Page](http://jsperf.com/rusha/13).\n\nA normalized estimation based on the best results for each implementation, smaller is better:\n![rough performance graph](http://srijs.github.io/rusha/bench/unscientific01.png)\n\nResults per Implementation and Platform:\n![performance chart](https://docs.google.com/spreadsheet/oimg?key=0Ag9CYh5kHpegdDB1ZG16WU1xVFgxdjRuQUVwQXRnWVE&oid=1&zx=pcatr2aits9)\n\nAll tests were performed on a MacBook Air 1.7 GHz Intel Core i5 and 4 GB 1333 MHz DDR3.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/srijs/rusha.git"
  },
  "scripts": {
    "benchmark": "grunt benchmark",
    "build": "grunt build",
    "test": "grunt test",
    "test:unit": "grunt test:unit"
  },
  "version": "0.8.12"
}
